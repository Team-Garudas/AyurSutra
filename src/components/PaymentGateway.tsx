import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport jsPDF from 'jspdf';\nimport QRCode from 'qrcode';\nimport {\n  CreditCard,\n  Smartphone,\n  Building2,\n  Wallet,\n  CheckCircle,\n  AlertCircle,\n  Download,\n  Receipt,\n  Shield,\n  Percent,\n  IndianRupee,\n  Clock,\n  RefreshCcw,\n  Zap\n} from 'lucide-react';\n\ninterface PaymentGatewayProps {\n  isOpen: boolean;\n  onClose: () => void;\n  appointmentDetails: {\n    id: string;\n    patientName: string;\n    doctorName: string;\n    hospitalName: string;\n    date: string;\n    amount: number;\n    services: string[];\n  };\n  onPaymentComplete: (paymentData: PaymentData) => void;\n}\n\nexport interface PaymentData {\n  id: string;\n  method: 'UPI' | 'Net Banking' | 'Credit Card' | 'Debit Card' | 'PhonePe' | 'Paytm' | 'GooglePay' | 'Cash';\n  amount: number;\n  transactionId: string;\n  status: 'completed' | 'pending' | 'failed' | 'refunded';\n  timestamp: string;\n  gatewayResponse?: any;\n  discountAmount?: number;\n  taxAmount?: number;\n  promoCode?: string;\n}\n\nconst PAYMENT_METHODS = [\n  { id: 'upi', name: 'UPI', icon: Smartphone, color: 'text-green-600', description: 'Pay using UPI apps' },\n  { id: 'netbanking', name: 'Net Banking', icon: Building2, color: 'text-blue-600', description: 'Online banking' },\n  { id: 'credit', name: 'Credit Card', icon: CreditCard, color: 'text-purple-600', description: 'Visa, MasterCard, Amex' },\n  { id: 'debit', name: 'Debit Card', icon: CreditCard, color: 'text-orange-600', description: 'Bank debit cards' },\n  { id: 'phonePe', name: 'PhonePe', icon: Wallet, color: 'text-indigo-600', description: 'PhonePe wallet' },\n  { id: 'paytm', name: 'Paytm', icon: Wallet, color: 'text-cyan-600', description: 'Paytm wallet' },\n  { id: 'googlePay', name: 'Google Pay', icon: Wallet, color: 'text-emerald-600', description: 'Google Pay wallet' },\n  { id: 'cash', name: 'Cash Payment', icon: IndianRupee, color: 'text-yellow-600', description: 'Pay at hospital' }\n];\n\nconst PROMO_CODES = [\n  { code: 'FIRST10', discount: 10, type: 'percentage', description: 'First time discount' },\n  { code: 'HEALTH50', discount: 50, type: 'amount', description: 'Flat ₹50 off' },\n  { code: 'SENIOR20', discount: 20, type: 'percentage', description: 'Senior citizen discount' },\n];\n\nexport default function PaymentGateway({ isOpen, onClose, appointmentDetails, onPaymentComplete }: PaymentGatewayProps) {\n  const [selectedMethod, setSelectedMethod] = useState<string>('');\n  const [paymentStep, setPaymentStep] = useState<'method' | 'details' | 'processing' | 'success'>('method');\n  const [paymentDetails, setPaymentDetails] = useState({\n    cardNumber: '',\n    expiryDate: '',\n    cvv: '',\n    cardHolderName: '',\n    upiId: '',\n    bankName: '',\n    accountNumber: '',\n    ifscCode: ''\n  });\n  const [promoCode, setPromoCode] = useState('');\n  const [discount, setDiscount] = useState(0);\n  const [processing, setProcessing] = useState(false);\n  const [paymentData, setPaymentData] = useState<PaymentData | null>(null);\n\n  // Calculate amounts\n  const baseAmount = appointmentDetails.amount;\n  const discountAmount = discount;\n  const taxAmount = Math.round((baseAmount - discountAmount) * 0.18); // 18% GST\n  const finalAmount = baseAmount - discountAmount + taxAmount;\n\n  // Apply promo code\n  const applyPromoCode = () => {\n    const promo = PROMO_CODES.find(p => p.code === promoCode.toUpperCase());\n    if (promo) {\n      const discountValue = promo.type === 'percentage' \n        ? Math.round((baseAmount * promo.discount) / 100)\n        : promo.discount;\n      setDiscount(discountValue);\n      alert(`✅ Promo code applied! You saved ₹${discountValue}`);\n    } else {\n      alert('❌ Invalid promo code');\n      setDiscount(0);\n    }\n  };\n\n  // Process payment\n  const processPayment = async () => {\n    setProcessing(true);\n    setPaymentStep('processing');\n    \n    try {\n      // Simulate payment processing\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      const transactionId = `TXN${Date.now()}${Math.floor(Math.random() * 1000)}`;\n      const payment: PaymentData = {\n        id: `PAY${Date.now()}`,\n        method: selectedMethod as any,\n        amount: finalAmount,\n        transactionId,\n        status: 'completed',\n        timestamp: new Date().toISOString(),\n        discountAmount: discount,\n        taxAmount,\n        promoCode: promoCode || undefined\n      };\n      \n      setPaymentData(payment);\n      setPaymentStep('success');\n      \n      // Generate and download invoice\n      await generateInvoice(payment);\n      \n      onPaymentComplete(payment);\n    } catch (error) {\n      alert('❌ Payment failed. Please try again.');\n      setPaymentStep('details');\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  // Generate professional invoice\n  const generateInvoice = async (payment: PaymentData) => {\n    try {\n      const pdf = new jsPDF();\n      const pageWidth = pdf.internal.pageSize.getWidth();\n      \n      // Header\n      pdf.setFillColor(59, 130, 246);\n      pdf.rect(0, 0, pageWidth, 40, 'F');\n      \n      pdf.setTextColor(255, 255, 255);\n      pdf.setFontSize(20);\n      pdf.setFont('helvetica', 'bold');\n      pdf.text('PAYMENT INVOICE', pageWidth/2, 25, { align: 'center' });\n      \n      // Invoice details\n      let y = 55;\n      pdf.setTextColor(0, 0, 0);\n      pdf.setFontSize(12);\n      \n      const invoiceDetails = [\n        ['Invoice ID:', payment.id],\n        ['Transaction ID:', payment.transactionId],\n        ['Date:', new Date().toLocaleDateString('en-IN')],\n        ['Patient:', appointmentDetails.patientName],\n        ['Doctor:', appointmentDetails.doctorName],\n        ['Hospital:', appointmentDetails.hospitalName],\n        ['Appointment Date:', appointmentDetails.date],\n        ['Payment Method:', payment.method]\n      ];\n      \n      invoiceDetails.forEach(([label, value]) => {\n        pdf.setFont('helvetica', 'bold');\n        pdf.text(label, 20, y);\n        pdf.setFont('helvetica', 'normal');\n        pdf.text(String(value), 80, y);\n        y += 10;\n      });\n      \n      // Amount breakdown\n      y += 10;\n      pdf.setFont('helvetica', 'bold');\n      pdf.text('AMOUNT BREAKDOWN', 20, y);\n      y += 15;\n      \n      const amounts = [\n        ['Base Amount:', `₹${baseAmount}`],\n        ['Discount:', `-₹${discountAmount}`],\n        ['GST (18%):', `₹${taxAmount}`],\n        ['Total Amount:', `₹${finalAmount}`]\n      ];\n      \n      amounts.forEach(([label, value], index) => {\n        pdf.setFont('helvetica', index === amounts.length - 1 ? 'bold' : 'normal');\n        pdf.text(label, 20, y);\n        pdf.text(value, 150, y);\n        y += 10;\n      });\n      \n      // QR Code for verification\n      const qrData = `Invoice:${payment.id},Amount:${finalAmount},TxnId:${payment.transactionId}`;\n      const qrCodeDataURL = await QRCode.toDataURL(qrData);\n      pdf.addImage(qrCodeDataURL, 'PNG', 150, 200, 40, 40);\n      \n      pdf.setFontSize(8);\n      pdf.text('Scan for verification', 170, 250, { align: 'center' });\n      \n      // Footer\n      pdf.setFontSize(10);\n      pdf.text('This is a digitally generated invoice', pageWidth/2, 270, { align: 'center' });\n      \n      pdf.save(`Invoice_${payment.id}.pdf`);\n    } catch (error) {\n      console.error('Error generating invoice:', error);\n    }\n  };\n\n  const resetForm = () => {\n    setSelectedMethod('');\n    setPaymentStep('method');\n    setPaymentDetails({\n      cardNumber: '',\n      expiryDate: '',\n      cvv: '',\n      cardHolderName: '',\n      upiId: '',\n      bankName: '',\n      accountNumber: '',\n      ifscCode: ''\n    });\n    setPromoCode('');\n    setDiscount(0);\n    setPaymentData(null);\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={resetForm}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n              <CreditCard className=\"w-4 h-4 text-white\" />\n            </div>\n            Secure Payment Gateway\n          </DialogTitle>\n          <DialogDescription>\n            Complete your appointment payment securely\n          </DialogDescription>\n        </DialogHeader>\n\n        {paymentStep === 'method' && (\n          <div className=\"space-y-6\">\n            {/* Appointment Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Appointment Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Patient:</span>\n                  <span className=\"font-semibold\">{appointmentDetails.patientName}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Doctor:</span>\n                  <span>{appointmentDetails.doctorName}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Date:</span>\n                  <span>{appointmentDetails.date}</span>\n                </div>\n                <div className=\"flex justify-between text-sm border-t pt-2 font-semibold\">\n                  <span>Amount:</span>\n                  <span>₹{baseAmount}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Promo Code */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex gap-2\">\n                  <Input \n                    placeholder=\"Enter promo code\"\n                    value={promoCode}\n                    onChange={(e) => setPromoCode(e.target.value.toUpperCase())}\n                    className=\"flex-1\"\n                  />\n                  <Button onClick={applyPromoCode} variant=\"outline\">\n                    <Percent className=\"w-4 h-4 mr-2\" />\n                    Apply\n                  </Button>\n                </div>\n                {discount > 0 && (\n                  <div className=\"mt-2 text-green-600 text-sm\">\n                    ✅ Discount applied: -₹{discount}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Payment Methods */}\n            <div className=\"space-y-3\">\n              <h3 className=\"font-semibold\">Select Payment Method</h3>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {PAYMENT_METHODS.map((method) => {\n                  const Icon = method.icon;\n                  return (\n                    <Card \n                      key={method.id}\n                      className={`cursor-pointer transition-all duration-200 hover:shadow-md ${\n                        selectedMethod === method.id ? 'ring-2 ring-blue-500 bg-blue-50' : ''\n                      }`}\n                      onClick={() => setSelectedMethod(method.id)}\n                    >\n                      <CardContent className=\"p-4 flex items-center space-x-3\">\n                        <Icon className={`w-6 h-6 ${method.color}`} />\n                        <div>\n                          <div className=\"font-medium\">{method.name}</div>\n                          <div className=\"text-xs text-gray-500\">{method.description}</div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Amount Breakdown */}\n            <Card>\n              <CardContent className=\"p-4 space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Base Amount:</span>\n                  <span>₹{baseAmount}</span>\n                </div>\n                {discount > 0 && (\n                  <div className=\"flex justify-between text-sm text-green-600\">\n                    <span>Discount:</span>\n                    <span>-₹{discount}</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between text-sm\">\n                  <span>GST (18%):</span>\n                  <span>₹{taxAmount}</span>\n                </div>\n                <div className=\"flex justify-between font-semibold text-lg border-t pt-2\">\n                  <span>Total:</span>\n                  <span>₹{finalAmount}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Button \n              onClick={() => setPaymentStep('details')} \n              disabled={!selectedMethod}\n              className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n            >\n              Proceed to Payment\n            </Button>\n          </div>\n        )}\n\n        {paymentStep === 'details' && (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <Badge className=\"bg-blue-100 text-blue-800\">\n                {PAYMENT_METHODS.find(m => m.id === selectedMethod)?.name}\n              </Badge>\n              <div className=\"mt-2 text-2xl font-bold\">₹{finalAmount}</div>\n            </div>\n\n            {/* Payment Form based on selected method */}\n            {selectedMethod === 'upi' && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>UPI ID</Label>\n                  <Input \n                    placeholder=\"yourname@upi\"\n                    value={paymentDetails.upiId}\n                    onChange={(e) => setPaymentDetails({...paymentDetails, upiId: e.target.value})}\n                  />\n                </div>\n              </div>\n            )}\n\n            {(selectedMethod === 'credit' || selectedMethod === 'debit') && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Card Number</Label>\n                  <Input \n                    placeholder=\"1234 5678 9012 3456\"\n                    value={paymentDetails.cardNumber}\n                    onChange={(e) => setPaymentDetails({...paymentDetails, cardNumber: e.target.value})}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Expiry Date</Label>\n                    <Input \n                      placeholder=\"MM/YY\"\n                      value={paymentDetails.expiryDate}\n                      onChange={(e) => setPaymentDetails({...paymentDetails, expiryDate: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label>CVV</Label>\n                    <Input \n                      placeholder=\"123\"\n                      type=\"password\"\n                      value={paymentDetails.cvv}\n                      onChange={(e) => setPaymentDetails({...paymentDetails, cvv: e.target.value})}\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label>Card Holder Name</Label>\n                  <Input \n                    placeholder=\"John Doe\"\n                    value={paymentDetails.cardHolderName}\n                    onChange={(e) => setPaymentDetails({...paymentDetails, cardHolderName: e.target.value})}\n                  />\n                </div>\n              </div>\n            )}\n\n            {selectedMethod === 'netbanking' && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Select Bank</Label>\n                  <Select value={paymentDetails.bankName} onValueChange={(value) => setPaymentDetails({...paymentDetails, bankName: value})}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Choose your bank\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"sbi\">State Bank of India</SelectItem>\n                      <SelectItem value=\"hdfc\">HDFC Bank</SelectItem>\n                      <SelectItem value=\"icici\">ICICI Bank</SelectItem>\n                      <SelectItem value=\"axis\">Axis Bank</SelectItem>\n                      <SelectItem value=\"kotak\">Kotak Mahindra Bank</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            )}\n\n            {selectedMethod === 'cash' && (\n              <div className=\"text-center p-6 bg-yellow-50 rounded-lg\">\n                <IndianRupee className=\"w-12 h-12 text-yellow-600 mx-auto mb-3\" />\n                <h3 className=\"font-semibold mb-2\">Cash Payment</h3>\n                <p className=\"text-sm text-gray-600\">Please pay ₹{finalAmount} at the hospital reception before your appointment.</p>\n              </div>\n            )}\n\n            <div className=\"flex gap-3\">\n              <Button variant=\"outline\" onClick={() => setPaymentStep('method')} className=\"flex-1\">\n                Back\n              </Button>\n              <Button onClick={processPayment} className=\"flex-1 bg-gradient-to-r from-green-600 to-emerald-600\">\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Pay Securely\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {paymentStep === 'processing' && (\n          <div className=\"text-center py-12\">\n            <div className=\"w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-6\"></div>\n            <h3 className=\"text-xl font-semibold mb-2\">Processing Payment...</h3>\n            <p className=\"text-gray-600\">Please do not close this window</p>\n          </div>\n        )}\n\n        {paymentStep === 'success' && paymentData && (\n          <div className=\"text-center space-y-6\">\n            <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto\">\n              <CheckCircle className=\"w-8 h-8 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold text-green-600 mb-2\">Payment Successful!</h3>\n              <p className=\"text-gray-600\">Your appointment has been confirmed</p>\n            </div>\n            \n            <Card>\n              <CardContent className=\"p-4 space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Transaction ID:</span>\n                  <span className=\"font-mono\">{paymentData.transactionId}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Amount Paid:</span>\n                  <span className=\"font-semibold\">₹{paymentData.amount}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Payment Method:</span>\n                  <span>{paymentData.method}</span>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <div className=\"flex gap-3\">\n              <Button variant=\"outline\" onClick={() => generateInvoice(paymentData)} className=\"flex-1\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Download Invoice\n              </Button>\n              <Button onClick={resetForm} className=\"flex-1\">\n                Done\n              </Button>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}
